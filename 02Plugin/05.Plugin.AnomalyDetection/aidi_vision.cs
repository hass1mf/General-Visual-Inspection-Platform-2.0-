//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace aqrose.aidi_vision {

public class IntVector : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IList<int>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IntVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_IntVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IntVector(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (int element in c) {
      this.Add(element);
    }
  }

  public IntVector(global::System.Collections.Generic.IEnumerable<int> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (int element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(int[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(int[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, int[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public int[] ToArray() {
    int[] array = new int[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<int> global::System.Collections.Generic.IEnumerable<int>.GetEnumerator() {
    return new IntVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntVectorEnumerator(this);
  }

  public IntVectorEnumerator GetEnumerator() {
    return new IntVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<int>
  {
    private IntVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntVectorEnumerator(IntVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public int Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (int)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_visionPINVOKE.IntVector_Clear(swigCPtr);
  }

  public void Add(int x) {
    aidi_visionPINVOKE.IntVector_Add(swigCPtr, x);
  }

  private uint size() {
    uint ret = aidi_visionPINVOKE.IntVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_visionPINVOKE.IntVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_visionPINVOKE.IntVector_reserve(swigCPtr, n);
  }

  public IntVector() : this(aidi_visionPINVOKE.new_IntVector__SWIG_0(), true) {
  }

  public IntVector(IntVector other) : this(aidi_visionPINVOKE.new_IntVector__SWIG_1(IntVector.getCPtr(other)), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public IntVector(int capacity) : this(aidi_visionPINVOKE.new_IntVector__SWIG_2(capacity), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  private int getitemcopy(int index) {
    int ret = aidi_visionPINVOKE.IntVector_getitemcopy(swigCPtr, index);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int getitem(int index) {
    int ret = aidi_visionPINVOKE.IntVector_getitem(swigCPtr, index);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, int val) {
    aidi_visionPINVOKE.IntVector_setitem(swigCPtr, index, val);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(IntVector values) {
    aidi_visionPINVOKE.IntVector_AddRange(swigCPtr, IntVector.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public IntVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_visionPINVOKE.IntVector_GetRange(swigCPtr, index, count);
    IntVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntVector(cPtr, true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, int x) {
    aidi_visionPINVOKE.IntVector_Insert(swigCPtr, index, x);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, IntVector values) {
    aidi_visionPINVOKE.IntVector_InsertRange(swigCPtr, index, IntVector.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_visionPINVOKE.IntVector_RemoveAt(swigCPtr, index);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_visionPINVOKE.IntVector_RemoveRange(swigCPtr, index, count);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static IntVector Repeat(int value, int count) {
    global::System.IntPtr cPtr = aidi_visionPINVOKE.IntVector_Repeat(value, count);
    IntVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntVector(cPtr, true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_visionPINVOKE.IntVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_visionPINVOKE.IntVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, IntVector values) {
    aidi_visionPINVOKE.IntVector_SetRange(swigCPtr, index, IntVector.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(int value) {
    bool ret = aidi_visionPINVOKE.IntVector_Contains(swigCPtr, value);
    return ret;
  }

  public int IndexOf(int value) {
    int ret = aidi_visionPINVOKE.IntVector_IndexOf(swigCPtr, value);
    return ret;
  }

  public int LastIndexOf(int value) {
    int ret = aidi_visionPINVOKE.IntVector_LastIndexOf(swigCPtr, value);
    return ret;
  }

  public bool Remove(int value) {
    bool ret = aidi_visionPINVOKE.IntVector_Remove(swigCPtr, value);
    return ret;
  }

}

}
namespace aqrose.aidi_vision {

public class StringVector : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IList<string>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StringVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StringVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_StringVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public StringVector(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (string element in c) {
      this.Add(element);
    }
  }

  public StringVector(global::System.Collections.Generic.IEnumerable<string> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (string element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public string this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(string[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(string[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, string[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public string[] ToArray() {
    string[] array = new string[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<string> global::System.Collections.Generic.IEnumerable<string>.GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  public StringVectorEnumerator GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class StringVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<string>
  {
    private StringVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public StringVectorEnumerator(StringVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public string Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (string)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_visionPINVOKE.StringVector_Clear(swigCPtr);
  }

  public void Add(string x) {
    aidi_visionPINVOKE.StringVector_Add(swigCPtr, x);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = aidi_visionPINVOKE.StringVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_visionPINVOKE.StringVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_visionPINVOKE.StringVector_reserve(swigCPtr, n);
  }

  public StringVector() : this(aidi_visionPINVOKE.new_StringVector__SWIG_0(), true) {
  }

  public StringVector(StringVector other) : this(aidi_visionPINVOKE.new_StringVector__SWIG_1(StringVector.getCPtr(other)), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector(int capacity) : this(aidi_visionPINVOKE.new_StringVector__SWIG_2(capacity), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  private string getitemcopy(int index) {
    string ret = aidi_visionPINVOKE.StringVector_getitemcopy(swigCPtr, index);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private string getitem(int index) {
    string ret = aidi_visionPINVOKE.StringVector_getitem(swigCPtr, index);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, string val) {
    aidi_visionPINVOKE.StringVector_setitem(swigCPtr, index, val);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(StringVector values) {
    aidi_visionPINVOKE.StringVector_AddRange(swigCPtr, StringVector.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_visionPINVOKE.StringVector_GetRange(swigCPtr, index, count);
    StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, string x) {
    aidi_visionPINVOKE.StringVector_Insert(swigCPtr, index, x);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, StringVector values) {
    aidi_visionPINVOKE.StringVector_InsertRange(swigCPtr, index, StringVector.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_visionPINVOKE.StringVector_RemoveAt(swigCPtr, index);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_visionPINVOKE.StringVector_RemoveRange(swigCPtr, index, count);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static StringVector Repeat(string value, int count) {
    global::System.IntPtr cPtr = aidi_visionPINVOKE.StringVector_Repeat(value, count);
    StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_visionPINVOKE.StringVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_visionPINVOKE.StringVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, StringVector values) {
    aidi_visionPINVOKE.StringVector_SetRange(swigCPtr, index, StringVector.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(string value) {
    bool ret = aidi_visionPINVOKE.StringVector_Contains(swigCPtr, value);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int IndexOf(string value) {
    int ret = aidi_visionPINVOKE.StringVector_IndexOf(swigCPtr, value);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int LastIndexOf(string value) {
    int ret = aidi_visionPINVOKE.StringVector_LastIndexOf(swigCPtr, value);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Remove(string value) {
    bool ret = aidi_visionPINVOKE.StringVector_Remove(swigCPtr, value);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace aqrose.aidi_vision {

public class StringFloatMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<string, float>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StringFloatMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StringFloatMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringFloatMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_StringFloatMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public float this[string key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(string key, out float value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(float);
    return false;
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<string> Keys {
    get {
      global::System.Collections.Generic.ICollection<string> keys = new global::System.Collections.Generic.List<string>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<float> Values {
    get {
      global::System.Collections.Generic.ICollection<float> vals = new global::System.Collections.Generic.List<float>();
      foreach (global::System.Collections.Generic.KeyValuePair<string, float> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<string, float> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<string, float> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<string, float> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<string, float>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<string, float>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<string> keyList = new global::System.Collections.Generic.List<string>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      string currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<string, float>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, float>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, float>>.GetEnumerator() {
    return new StringFloatMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new StringFloatMapEnumerator(this);
  }

  public StringFloatMapEnumerator GetEnumerator() {
    return new StringFloatMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class StringFloatMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, float>>
  {
    private StringFloatMap collectionRef;
    private global::System.Collections.Generic.IList<string> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public StringFloatMapEnumerator(StringFloatMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<string>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<string, float> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<string, float>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        string currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<string, float>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public StringFloatMap() : this(aidi_visionPINVOKE.new_StringFloatMap__SWIG_0(), true) {
  }

  public StringFloatMap(StringFloatMap other) : this(aidi_visionPINVOKE.new_StringFloatMap__SWIG_1(StringFloatMap.getCPtr(other)), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = aidi_visionPINVOKE.StringFloatMap_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = aidi_visionPINVOKE.StringFloatMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    aidi_visionPINVOKE.StringFloatMap_Clear(swigCPtr);
  }

  private float getitem(string key) {
    float ret = aidi_visionPINVOKE.StringFloatMap_getitem(swigCPtr, key);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(string key, float x) {
    aidi_visionPINVOKE.StringFloatMap_setitem(swigCPtr, key, x);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ContainsKey(string key) {
    bool ret = aidi_visionPINVOKE.StringFloatMap_ContainsKey(swigCPtr, key);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(string key, float value) {
    aidi_visionPINVOKE.StringFloatMap_Add(swigCPtr, key, value);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(string key) {
    bool ret = aidi_visionPINVOKE.StringFloatMap_Remove(swigCPtr, key);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = aidi_visionPINVOKE.StringFloatMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private string get_next_key(global::System.IntPtr swigiterator) {
    string ret = aidi_visionPINVOKE.StringFloatMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    aidi_visionPINVOKE.StringFloatMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

}
namespace aqrose.aidi_vision {

public class C_LabelIO : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal C_LabelIO(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(C_LabelIO obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~C_LabelIO() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_C_LabelIO(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public C_LabelIO() : this(aidi_visionPINVOKE.new_C_LabelIO(), true) {
  }

}

}
namespace aqrose.aidi_vision {

public class LabelIO : C_LabelIO {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal LabelIO(global::System.IntPtr cPtr, bool cMemoryOwn) : base(aidi_visionPINVOKE.LabelIO_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LabelIO obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_LabelIO(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public static LabelIO ReadFrom(string path, SWIGTYPE_p_bool ok) {
    LabelIO ret = new LabelIO(aidi_visionPINVOKE.LabelIO_ReadFrom__SWIG_0(path, SWIGTYPE_p_bool.getCPtr(ok)), true);
    return ret;
  }

  public static LabelIO ReadFrom(string path) {
    LabelIO ret = new LabelIO(aidi_visionPINVOKE.LabelIO_ReadFrom__SWIG_1(path), true);
    return ret;
  }

  public LabelIO() : this(aidi_visionPINVOKE.new_LabelIO__SWIG_0(), true) {
  }

  public LabelIO(LabelIO other) : this(aidi_visionPINVOKE.new_LabelIO__SWIG_1(LabelIO.getCPtr(other)), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint size() {
    uint ret = aidi_visionPINVOKE.LabelIO_size(swigCPtr);
    return ret;
  }

  public string alloc_data(uint len) {
    string ret = aidi_visionPINVOKE.LabelIO_alloc_data(swigCPtr, len);
    return ret;
  }

  public string mutable_data() {
    string ret = aidi_visionPINVOKE.LabelIO_mutable_data(swigCPtr);
    return ret;
  }

  public string data() {
    string ret = aidi_visionPINVOKE.LabelIO_data__SWIG_0(swigCPtr);
    return ret;
  }

  public void data(byte[] outbuf, uint buf_size) {
    aidi_visionPINVOKE.LabelIO_data__SWIG_1(swigCPtr, outbuf, buf_size);
  }

  public string data2str() {
    string ret = aidi_visionPINVOKE.LabelIO_data2str(swigCPtr);
    return ret;
  }

  public void clear() {
    aidi_visionPINVOKE.LabelIO_clear(swigCPtr);
  }

  public bool empty() {
    bool ret = aidi_visionPINVOKE.LabelIO_empty(swigCPtr);
    return ret;
  }

  public void set_data(byte[] inbuf, uint len) {
    aidi_visionPINVOKE.LabelIO_set_data__SWIG_0(swigCPtr, inbuf, len);
  }

  public void set_data(string data) {
    aidi_visionPINVOKE.LabelIO_set_data__SWIG_1(swigCPtr, data);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool read_from(string path) {
    bool ret = aidi_visionPINVOKE.LabelIO_read_from__SWIG_0(swigCPtr, path);
    return ret;
  }

  public bool save_to(string path) {
    bool ret = aidi_visionPINVOKE.LabelIO_save_to__SWIG_0(swigCPtr, path);
    return ret;
  }

  public string to_string() {
    string ret = aidi_visionPINVOKE.LabelIO_to_string(swigCPtr);
    return ret;
  }

  public string to_short_string() {
    string ret = aidi_visionPINVOKE.LabelIO_to_short_string(swigCPtr);
    return ret;
  }

  public string to_json() {
    string ret = aidi_visionPINVOKE.LabelIO_to_json(swigCPtr);
    return ret;
  }

  public bool from_json(string json_str) {
    bool ret = aidi_visionPINVOKE.LabelIO_from_json(swigCPtr, json_str);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace aqrose.aidi_vision {

public class BatchLabelIO : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IEnumerable<LabelIO>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BatchLabelIO(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BatchLabelIO obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BatchLabelIO() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_BatchLabelIO(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public BatchLabelIO(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (LabelIO element in c) {
      this.Add(element);
    }
  }

  public BatchLabelIO(global::System.Collections.Generic.IEnumerable<LabelIO> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (LabelIO element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public LabelIO this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(LabelIO[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(LabelIO[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, LabelIO[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public LabelIO[] ToArray() {
    LabelIO[] array = new LabelIO[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<LabelIO> global::System.Collections.Generic.IEnumerable<LabelIO>.GetEnumerator() {
    return new BatchLabelIOEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new BatchLabelIOEnumerator(this);
  }

  public BatchLabelIOEnumerator GetEnumerator() {
    return new BatchLabelIOEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class BatchLabelIOEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<LabelIO>
  {
    private BatchLabelIO collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public BatchLabelIOEnumerator(BatchLabelIO collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public LabelIO Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (LabelIO)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_visionPINVOKE.BatchLabelIO_Clear(swigCPtr);
  }

  public void Add(LabelIO x) {
    aidi_visionPINVOKE.BatchLabelIO_Add(swigCPtr, LabelIO.getCPtr(x));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = aidi_visionPINVOKE.BatchLabelIO_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_visionPINVOKE.BatchLabelIO_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_visionPINVOKE.BatchLabelIO_reserve(swigCPtr, n);
  }

  public BatchLabelIO() : this(aidi_visionPINVOKE.new_BatchLabelIO__SWIG_0(), true) {
  }

  public BatchLabelIO(BatchLabelIO other) : this(aidi_visionPINVOKE.new_BatchLabelIO__SWIG_1(BatchLabelIO.getCPtr(other)), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public BatchLabelIO(int capacity) : this(aidi_visionPINVOKE.new_BatchLabelIO__SWIG_2(capacity), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  private LabelIO getitemcopy(int index) {
    LabelIO ret = new LabelIO(aidi_visionPINVOKE.BatchLabelIO_getitemcopy(swigCPtr, index), true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private LabelIO getitem(int index) {
    LabelIO ret = new LabelIO(aidi_visionPINVOKE.BatchLabelIO_getitem(swigCPtr, index), false);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, LabelIO val) {
    aidi_visionPINVOKE.BatchLabelIO_setitem(swigCPtr, index, LabelIO.getCPtr(val));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(BatchLabelIO values) {
    aidi_visionPINVOKE.BatchLabelIO_AddRange(swigCPtr, BatchLabelIO.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public BatchLabelIO GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_visionPINVOKE.BatchLabelIO_GetRange(swigCPtr, index, count);
    BatchLabelIO ret = (cPtr == global::System.IntPtr.Zero) ? null : new BatchLabelIO(cPtr, true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, LabelIO x) {
    aidi_visionPINVOKE.BatchLabelIO_Insert(swigCPtr, index, LabelIO.getCPtr(x));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, BatchLabelIO values) {
    aidi_visionPINVOKE.BatchLabelIO_InsertRange(swigCPtr, index, BatchLabelIO.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_visionPINVOKE.BatchLabelIO_RemoveAt(swigCPtr, index);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_visionPINVOKE.BatchLabelIO_RemoveRange(swigCPtr, index, count);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static BatchLabelIO Repeat(LabelIO value, int count) {
    global::System.IntPtr cPtr = aidi_visionPINVOKE.BatchLabelIO_Repeat(LabelIO.getCPtr(value), count);
    BatchLabelIO ret = (cPtr == global::System.IntPtr.Zero) ? null : new BatchLabelIO(cPtr, true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_visionPINVOKE.BatchLabelIO_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_visionPINVOKE.BatchLabelIO_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, BatchLabelIO values) {
    aidi_visionPINVOKE.BatchLabelIO_SetRange(swigCPtr, index, BatchLabelIO.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace aqrose.aidi_vision {

public class C_Image : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal C_Image(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(C_Image obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~C_Image() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_C_Image(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public C_Image() : this(aidi_visionPINVOKE.new_C_Image(), true) {
  }

}

}
namespace aqrose.aidi_vision {

public class Image : C_Image {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Image(global::System.IntPtr cPtr, bool cMemoryOwn) : base(aidi_visionPINVOKE.Image_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Image obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_Image(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Image(uint visual_size) : this(aidi_visionPINVOKE.new_Image__SWIG_0(visual_size), true) {
  }

  public Image() : this(aidi_visionPINVOKE.new_Image__SWIG_1(), true) {
  }

  public Image(uint visual_size, int height, int width, int channel, Image.Depth depth) : this(aidi_visionPINVOKE.new_Image__SWIG_2(visual_size, height, width, channel, (int)depth), true) {
  }

  public Image(uint visual_size, int height, int width, int channel) : this(aidi_visionPINVOKE.new_Image__SWIG_3(visual_size, height, width, channel), true) {
  }

  public Image(uint visual_size, int height, int width) : this(aidi_visionPINVOKE.new_Image__SWIG_4(visual_size, height, width), true) {
  }

  public Image(Image other) : this(aidi_visionPINVOKE.new_Image__SWIG_5(Image.getCPtr(other)), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public Image roi(int x, int y, int w, int h) {
    Image ret = new Image(aidi_visionPINVOKE.Image_roi(swigCPtr, x, y, w, h), true);
    return ret;
  }

  public void resize(int height, int width) {
    aidi_visionPINVOKE.Image_resize(swigCPtr, height, width);
  }

  public bool convert_channel(int target_channel) {
    bool ret = aidi_visionPINVOKE.Image_convert_channel(swigCPtr, target_channel);
    return ret;
  }

  public void convert_depth(Image.Depth depth) {
    aidi_visionPINVOKE.Image_convert_depth(swigCPtr, (int)depth);
  }

  public BatchImage crop(LabelIO label, bool auto_mask) {
    BatchImage ret = new BatchImage(aidi_visionPINVOKE.Image_crop__SWIG_0(swigCPtr, LabelIO.getCPtr(label), auto_mask), true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BatchImage crop(LabelIO label) {
    BatchImage ret = new BatchImage(aidi_visionPINVOKE.Image_crop__SWIG_1(swigCPtr, LabelIO.getCPtr(label)), true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void draw(LabelIO label) {
    aidi_visionPINVOKE.Image_draw(swigCPtr, LabelIO.getCPtr(label));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public Image clone(int visual_idx) {
    Image ret = new Image(aidi_visionPINVOKE.Image_clone__SWIG_0(swigCPtr, visual_idx), true);
    return ret;
  }

  public Image clone() {
    Image ret = new Image(aidi_visionPINVOKE.Image_clone__SWIG_1(swigCPtr), true);
    return ret;
  }

  public Image visual_at(uint visual_idx) {
    Image ret = new Image(aidi_visionPINVOKE.Image_visual_at(swigCPtr, visual_idx), true);
    return ret;
  }

  public bool from_file(string path, int flag) {
    bool ret = aidi_visionPINVOKE.Image_from_file__SWIG_0(swigCPtr, path, flag);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool from_file(string path) {
    bool ret = aidi_visionPINVOKE.Image_from_file__SWIG_1(swigCPtr, path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool from_files(StringVector paths, int flag) {
    bool ret = aidi_visionPINVOKE.Image_from_files__SWIG_0(swigCPtr, StringVector.getCPtr(paths), flag);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool from_files(StringVector paths) {
    bool ret = aidi_visionPINVOKE.Image_from_files__SWIG_1(swigCPtr, StringVector.getCPtr(paths));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool to_file(string path) {
    bool ret = aidi_visionPINVOKE.Image_to_file(swigCPtr, path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool from_batch(BatchImage images) {
    bool ret = aidi_visionPINVOKE.Image_from_batch(swigCPtr, BatchImage.getCPtr(images));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool decode(string data, int flag) {
    bool ret = aidi_visionPINVOKE.Image_decode__SWIG_0(swigCPtr, data, flag);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool decode(string data) {
    bool ret = aidi_visionPINVOKE.Image_decode__SWIG_1(swigCPtr, data);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool encode(SWIGTYPE_p_std__string outbuf, string format) {
    bool ret = aidi_visionPINVOKE.Image_encode__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(outbuf), format);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool encode(SWIGTYPE_p_std__string outbuf) {
    bool ret = aidi_visionPINVOKE.Image_encode__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(outbuf));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void show(int wait_time, string winname, uint visual_idx) {
    aidi_visionPINVOKE.Image_show__SWIG_0(swigCPtr, wait_time, winname, visual_idx);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void show(int wait_time, string winname) {
    aidi_visionPINVOKE.Image_show__SWIG_1(swigCPtr, wait_time, winname);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void show(int wait_time) {
    aidi_visionPINVOKE.Image_show__SWIG_2(swigCPtr, wait_time);
  }

  public void from_chars(byte[] inbuf, int height, int width, int channel, Image.Depth depth) {
    aidi_visionPINVOKE.Image_from_chars__SWIG_0(swigCPtr, inbuf, height, width, channel, (int)depth);
  }

  public void from_chars(byte[] inbuf, int height, int width, int channel) {
    aidi_visionPINVOKE.Image_from_chars__SWIG_1(swigCPtr, inbuf, height, width, channel);
  }

  public void from_chars(byte[] inbuf, int height, int width) {
    aidi_visionPINVOKE.Image_from_chars__SWIG_2(swigCPtr, inbuf, height, width);
  }

  public void to_chars(byte[] outbuf, uint buf_size) {
    aidi_visionPINVOKE.Image_to_chars(swigCPtr, outbuf, buf_size);
  }

  public global::System.IntPtr data(uint visual_idx) {
    global::System.IntPtr ret = aidi_visionPINVOKE.Image_data__SWIG_0(swigCPtr, visual_idx);
    return ret;
  }

  public global::System.IntPtr data() {
    global::System.IntPtr ret = aidi_visionPINVOKE.Image_data__SWIG_1(swigCPtr);
    return ret;
  }

  public global::System.IntPtr mutable_data(uint visual_idx) {
    global::System.IntPtr ret = aidi_visionPINVOKE.Image_mutable_data__SWIG_0(swigCPtr, visual_idx);
    return ret;
  }

  public global::System.IntPtr mutable_data() {
    global::System.IntPtr ret = aidi_visionPINVOKE.Image_mutable_data__SWIG_1(swigCPtr);
    return ret;
  }

  public uint data_size(uint visual_idx) {
    uint ret = aidi_visionPINVOKE.Image_data_size__SWIG_0(swigCPtr, visual_idx);
    return ret;
  }

  public uint data_size() {
    uint ret = aidi_visionPINVOKE.Image_data_size__SWIG_1(swigCPtr);
    return ret;
  }

  public uint data_byte_size(uint visual_idx) {
    uint ret = aidi_visionPINVOKE.Image_data_byte_size__SWIG_0(swigCPtr, visual_idx);
    return ret;
  }

  public uint data_byte_size() {
    uint ret = aidi_visionPINVOKE.Image_data_byte_size__SWIG_1(swigCPtr);
    return ret;
  }

  public int height() {
    int ret = aidi_visionPINVOKE.Image_height(swigCPtr);
    return ret;
  }

  public int width() {
    int ret = aidi_visionPINVOKE.Image_width(swigCPtr);
    return ret;
  }

  public int total_channels() {
    int ret = aidi_visionPINVOKE.Image_total_channels(swigCPtr);
    return ret;
  }

  public int channels() {
    int ret = aidi_visionPINVOKE.Image_channels__SWIG_0(swigCPtr);
    return ret;
  }

  public int channels(uint visual_idx) {
    int ret = aidi_visionPINVOKE.Image_channels__SWIG_1(swigCPtr, visual_idx);
    return ret;
  }

  public Image.Depth depth(uint visual_idx) {
    Image.Depth ret = (Image.Depth)aidi_visionPINVOKE.Image_depth__SWIG_0(swigCPtr, visual_idx);
    return ret;
  }

  public Image.Depth depth() {
    Image.Depth ret = (Image.Depth)aidi_visionPINVOKE.Image_depth__SWIG_1(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = aidi_visionPINVOKE.Image_empty(swigCPtr);
    return ret;
  }

  public uint visual_size() {
    uint ret = aidi_visionPINVOKE.Image_visual_size(swigCPtr);
    return ret;
  }

  public bool is_multi_visual() {
    bool ret = aidi_visionPINVOKE.Image_is_multi_visual(swigCPtr);
    return ret;
  }

  public void release() {
    aidi_visionPINVOKE.Image_release(swigCPtr);
  }

  public enum Depth {
    Depth_U8 = 0,
    Depth_U16 = 2,
    Depth_F32 = 5
  }

}

}
namespace aqrose.aidi_vision {

public class BatchImage : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IEnumerable<Image>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BatchImage(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BatchImage obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BatchImage() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_BatchImage(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public BatchImage(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (Image element in c) {
      this.Add(element);
    }
  }

  public BatchImage(global::System.Collections.Generic.IEnumerable<Image> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (Image element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public Image this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(Image[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(Image[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, Image[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public Image[] ToArray() {
    Image[] array = new Image[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<Image> global::System.Collections.Generic.IEnumerable<Image>.GetEnumerator() {
    return new BatchImageEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new BatchImageEnumerator(this);
  }

  public BatchImageEnumerator GetEnumerator() {
    return new BatchImageEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class BatchImageEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<Image>
  {
    private BatchImage collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public BatchImageEnumerator(BatchImage collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public Image Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (Image)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_visionPINVOKE.BatchImage_Clear(swigCPtr);
  }

  public void Add(Image x) {
    aidi_visionPINVOKE.BatchImage_Add(swigCPtr, Image.getCPtr(x));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = aidi_visionPINVOKE.BatchImage_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_visionPINVOKE.BatchImage_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_visionPINVOKE.BatchImage_reserve(swigCPtr, n);
  }

  public BatchImage() : this(aidi_visionPINVOKE.new_BatchImage__SWIG_0(), true) {
  }

  public BatchImage(BatchImage other) : this(aidi_visionPINVOKE.new_BatchImage__SWIG_1(BatchImage.getCPtr(other)), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public BatchImage(int capacity) : this(aidi_visionPINVOKE.new_BatchImage__SWIG_2(capacity), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  private Image getitemcopy(int index) {
    Image ret = new Image(aidi_visionPINVOKE.BatchImage_getitemcopy(swigCPtr, index), true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private Image getitem(int index) {
    Image ret = new Image(aidi_visionPINVOKE.BatchImage_getitem(swigCPtr, index), false);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, Image val) {
    aidi_visionPINVOKE.BatchImage_setitem(swigCPtr, index, Image.getCPtr(val));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(BatchImage values) {
    aidi_visionPINVOKE.BatchImage_AddRange(swigCPtr, BatchImage.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public BatchImage GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_visionPINVOKE.BatchImage_GetRange(swigCPtr, index, count);
    BatchImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new BatchImage(cPtr, true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, Image x) {
    aidi_visionPINVOKE.BatchImage_Insert(swigCPtr, index, Image.getCPtr(x));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, BatchImage values) {
    aidi_visionPINVOKE.BatchImage_InsertRange(swigCPtr, index, BatchImage.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_visionPINVOKE.BatchImage_RemoveAt(swigCPtr, index);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_visionPINVOKE.BatchImage_RemoveRange(swigCPtr, index, count);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static BatchImage Repeat(Image value, int count) {
    global::System.IntPtr cPtr = aidi_visionPINVOKE.BatchImage_Repeat(Image.getCPtr(value), count);
    BatchImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new BatchImage(cPtr, true);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_visionPINVOKE.BatchImage_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_visionPINVOKE.BatchImage_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, BatchImage values) {
    aidi_visionPINVOKE.BatchImage_SetRange(swigCPtr, index, BatchImage.getCPtr(values));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace aqrose.aidi_vision {

public class CustomProcessBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CustomProcessBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CustomProcessBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CustomProcessBase() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_CustomProcessBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CustomProcessBase() : this(aidi_visionPINVOKE.new_CustomProcessBase(), true) {
    SwigDirectorConnect();
  }

  public virtual bool need_pre_process() {
    bool ret = (SwigDerivedClassHasMethod("need_pre_process", swigMethodTypes0) ? aidi_visionPINVOKE.CustomProcessBase_need_pre_processSwigExplicitCustomProcessBase(swigCPtr) : aidi_visionPINVOKE.CustomProcessBase_need_pre_process(swigCPtr));
    return ret;
  }

  public virtual bool need_post_process() {
    bool ret = (SwigDerivedClassHasMethod("need_post_process", swigMethodTypes1) ? aidi_visionPINVOKE.CustomProcessBase_need_post_processSwigExplicitCustomProcessBase(swigCPtr) : aidi_visionPINVOKE.CustomProcessBase_need_post_process(swigCPtr));
    return ret;
  }

  public virtual bool need_post_process_only_label() {
    bool ret = (SwigDerivedClassHasMethod("need_post_process_only_label", swigMethodTypes2) ? aidi_visionPINVOKE.CustomProcessBase_need_post_process_only_labelSwigExplicitCustomProcessBase(swigCPtr) : aidi_visionPINVOKE.CustomProcessBase_need_post_process_only_label(swigCPtr));
    return ret;
  }

  public virtual void pre_process(Image arg0) {
    if (SwigDerivedClassHasMethod("pre_process", swigMethodTypes3)) aidi_visionPINVOKE.CustomProcessBase_pre_processSwigExplicitCustomProcessBase(swigCPtr, Image.getCPtr(arg0)); else aidi_visionPINVOKE.CustomProcessBase_pre_process(swigCPtr, Image.getCPtr(arg0));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void post_process(Image arg0, LabelIO arg1) {
    if (SwigDerivedClassHasMethod("post_process", swigMethodTypes4)) aidi_visionPINVOKE.CustomProcessBase_post_processSwigExplicitCustomProcessBase(swigCPtr, Image.getCPtr(arg0), LabelIO.getCPtr(arg1)); else aidi_visionPINVOKE.CustomProcessBase_post_process(swigCPtr, Image.getCPtr(arg0), LabelIO.getCPtr(arg1));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void post_process_only_label(LabelIO arg0) {
    if (SwigDerivedClassHasMethod("post_process_only_label", swigMethodTypes5)) aidi_visionPINVOKE.CustomProcessBase_post_process_only_labelSwigExplicitCustomProcessBase(swigCPtr, LabelIO.getCPtr(arg0)); else aidi_visionPINVOKE.CustomProcessBase_post_process_only_label(swigCPtr, LabelIO.getCPtr(arg0));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("need_pre_process", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateCustomProcessBase_0(SwigDirectorMethodneed_pre_process);
    if (SwigDerivedClassHasMethod("need_post_process", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateCustomProcessBase_1(SwigDirectorMethodneed_post_process);
    if (SwigDerivedClassHasMethod("need_post_process_only_label", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateCustomProcessBase_2(SwigDirectorMethodneed_post_process_only_label);
    if (SwigDerivedClassHasMethod("pre_process", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateCustomProcessBase_3(SwigDirectorMethodpre_process);
    if (SwigDerivedClassHasMethod("post_process", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateCustomProcessBase_4(SwigDirectorMethodpost_process);
    if (SwigDerivedClassHasMethod("post_process_only_label", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateCustomProcessBase_5(SwigDirectorMethodpost_process_only_label);
    aidi_visionPINVOKE.CustomProcessBase_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(CustomProcessBase));
    return hasDerivedMethod;
  }

  private bool SwigDirectorMethodneed_pre_process() {
    return need_pre_process();
  }

  private bool SwigDirectorMethodneed_post_process() {
    return need_post_process();
  }

  private bool SwigDirectorMethodneed_post_process_only_label() {
    return need_post_process_only_label();
  }

  private void SwigDirectorMethodpre_process(global::System.IntPtr arg0) {
    pre_process(new Image(arg0, false));
  }

  private void SwigDirectorMethodpost_process(global::System.IntPtr arg0, global::System.IntPtr arg1) {
    post_process(new Image(arg0, false), new LabelIO(arg1, false));
  }

  private void SwigDirectorMethodpost_process_only_label(global::System.IntPtr arg0) {
    post_process_only_label(new LabelIO(arg0, false));
  }

  public delegate bool SwigDelegateCustomProcessBase_0();
  public delegate bool SwigDelegateCustomProcessBase_1();
  public delegate bool SwigDelegateCustomProcessBase_2();
  public delegate void SwigDelegateCustomProcessBase_3(global::System.IntPtr arg0);
  public delegate void SwigDelegateCustomProcessBase_4(global::System.IntPtr arg0, global::System.IntPtr arg1);
  public delegate void SwigDelegateCustomProcessBase_5(global::System.IntPtr arg0);

  private SwigDelegateCustomProcessBase_0 swigDelegate0;
  private SwigDelegateCustomProcessBase_1 swigDelegate1;
  private SwigDelegateCustomProcessBase_2 swigDelegate2;
  private SwigDelegateCustomProcessBase_3 swigDelegate3;
  private SwigDelegateCustomProcessBase_4 swigDelegate4;
  private SwigDelegateCustomProcessBase_5 swigDelegate5;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(Image) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(Image), typeof(LabelIO) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(LabelIO) };
}

}
namespace aqrose.aidi_vision {

public class C_Client : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal C_Client(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(C_Client obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~C_Client() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_C_Client(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public C_Client() : this(aidi_visionPINVOKE.new_C_Client(), true) {
  }

}

}
namespace aqrose.aidi_vision {

public class Client : C_Client {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Client(global::System.IntPtr cPtr, bool cMemoryOwn) : base(aidi_visionPINVOKE.Client_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Client obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_Client(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Client(string auth_code) : this(aidi_visionPINVOKE.new_Client__SWIG_0(auth_code), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public Client() : this(aidi_visionPINVOKE.new_Client__SWIG_1(), true) {
  }

  public bool load_task(string task_info) {
    bool ret = aidi_visionPINVOKE.Client_load_task(swigCPtr, task_info);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int max_iters() {
    int ret = aidi_visionPINVOKE.Client_max_iters(swigCPtr);
    return ret;
  }

  public void start() {
    aidi_visionPINVOKE.Client_start(swigCPtr);
  }

  public void stop() {
    aidi_visionPINVOKE.Client_stop(swigCPtr);
  }

  public float get_avg_time() {
    float ret = aidi_visionPINVOKE.Client_get_avg_time(swigCPtr);
    return ret;
  }

  public int get_current_index() {
    int ret = aidi_visionPINVOKE.Client_get_current_index(swigCPtr);
    return ret;
  }

  public IntVector get_used_gpus() {
    IntVector ret = new IntVector(aidi_visionPINVOKE.Client_get_used_gpus(swigCPtr), true);
    return ret;
  }

  public int add_model_engine(string module_type, string model_path, string custom_test_param_path) {
    int ret = aidi_visionPINVOKE.Client_add_model_engine__SWIG_0(swigCPtr, module_type, model_path, custom_test_param_path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int add_model_engine(string module_type, string model_path) {
    int ret = aidi_visionPINVOKE.Client_add_model_engine__SWIG_1(swigCPtr, module_type, model_path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_ctm_proc_on_engine(int id, CustomProcessBase ctm_proc) {
    aidi_visionPINVOKE.Client_set_ctm_proc_on_engine(swigCPtr, id, CustomProcessBase.getCPtr(ctm_proc));
  }

  public bool add_sort_engine(ulong start_id) {
    bool ret = aidi_visionPINVOKE.Client_add_sort_engine__SWIG_0(swigCPtr, start_id);
    return ret;
  }

  public bool add_sort_engine() {
    bool ret = aidi_visionPINVOKE.Client_add_sort_engine__SWIG_1(swigCPtr);
    return ret;
  }

  public bool add_route_engine() {
    bool ret = aidi_visionPINVOKE.Client_add_route_engine(swigCPtr);
    return ret;
  }

  public ulong add_images(Image image) {
    ulong ret = aidi_visionPINVOKE.Client_add_images__SWIG_0(swigCPtr, Image.getCPtr(image));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong add_images(BatchImage images) {
    ulong ret = aidi_visionPINVOKE.Client_add_images__SWIG_1(swigCPtr, BatchImage.getCPtr(images));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool try_get_result(BatchLabelIO result, ref ulong inout_id) {
    bool ret = aidi_visionPINVOKE.Client_try_get_result__SWIG_0(swigCPtr, BatchLabelIO.getCPtr(result), ref inout_id);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BatchLabelIO wait_get_result(ref ulong inout_id) {
    BatchLabelIO ret = new BatchLabelIO(aidi_visionPINVOKE.Client_wait_get_result__SWIG_0(swigCPtr, ref inout_id), true);
    return ret;
  }

  public bool try_get_result(BatchLabelIO result) {
    bool ret = aidi_visionPINVOKE.Client_try_get_result__SWIG_1(swigCPtr, BatchLabelIO.getCPtr(result));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BatchLabelIO wait_get_result() {
    BatchLabelIO ret = new BatchLabelIO(aidi_visionPINVOKE.Client_wait_get_result__SWIG_1(swigCPtr), true);
    return ret;
  }

}

}
namespace aqrose.aidi_vision {

public class C_Trainer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal C_Trainer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(C_Trainer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~C_Trainer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_C_Trainer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public C_Trainer() : this(aidi_visionPINVOKE.new_C_Trainer(), true) {
  }

}

}
namespace aqrose.aidi_vision {

public class Trainer : C_Trainer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Trainer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(aidi_visionPINVOKE.Trainer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Trainer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_Trainer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Trainer(string auth_code) : this(aidi_visionPINVOKE.new_Trainer__SWIG_0(auth_code), true) {
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public Trainer() : this(aidi_visionPINVOKE.new_Trainer__SWIG_1(), true) {
  }

  public bool load_task(string taskinfo) {
    bool ret = aidi_visionPINVOKE.Trainer_load_task(swigCPtr, taskinfo);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int max_iters() {
    int ret = aidi_visionPINVOKE.Trainer_max_iters(swigCPtr);
    return ret;
  }

  public void start(bool step_by_step) {
    aidi_visionPINVOKE.Trainer_start__SWIG_0(swigCPtr, step_by_step);
  }

  public void start() {
    aidi_visionPINVOKE.Trainer_start__SWIG_1(swigCPtr);
  }

  public void step(int epoch) {
    aidi_visionPINVOKE.Trainer_step(swigCPtr, epoch);
  }

  public bool is_training() {
    bool ret = aidi_visionPINVOKE.Trainer_is_training(swigCPtr);
    return ret;
  }

  public bool is_train_over() {
    bool ret = aidi_visionPINVOKE.Trainer_is_train_over(swigCPtr);
    return ret;
  }

  public int node_rank() {
    int ret = aidi_visionPINVOKE.Trainer_node_rank(swigCPtr);
    return ret;
  }

  public int node_size() {
    int ret = aidi_visionPINVOKE.Trainer_node_size(swigCPtr);
    return ret;
  }

  public void stop() {
    aidi_visionPINVOKE.Trainer_stop(swigCPtr);
  }

  public bool save_model() {
    bool ret = aidi_visionPINVOKE.Trainer_save_model(swigCPtr);
    return ret;
  }

  public IntVector get_used_gpus() {
    IntVector ret = new IntVector(aidi_visionPINVOKE.Trainer_get_used_gpus(swigCPtr), true);
    return ret;
  }

  public StringFloatMap get_loss() {
    StringFloatMap ret = new StringFloatMap(aidi_visionPINVOKE.Trainer_get_loss(swigCPtr), true);
    return ret;
  }

}

}
namespace aqrose.aidi_vision {

public class Entry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Entry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Entry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Entry() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static bool VerifyAuth(string auth_code) {
    bool ret = aidi_visionPINVOKE.Entry_VerifyAuth__SWIG_0(auth_code);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool VerifyAuth() {
    bool ret = aidi_visionPINVOKE.Entry_VerifyAuth__SWIG_1();
    return ret;
  }

  public static bool BindRemoteAuth(string auth_code) {
    bool ret = aidi_visionPINVOKE.Entry_BindRemoteAuth(auth_code);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetRemoteAuthInfo(string auth_code, SWIGTYPE_p_int error_code) {
    string ret = aidi_visionPINVOKE.Entry_GetRemoteAuthInfo__SWIG_0(auth_code, SWIGTYPE_p_int.getCPtr(error_code));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetRemoteAuthInfo(string auth_code) {
    string ret = aidi_visionPINVOKE.Entry_GetRemoteAuthInfo__SWIG_1(auth_code);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetRemoteAuthInfo() {
    string ret = aidi_visionPINVOKE.Entry_GetRemoteAuthInfo__SWIG_2();
    return ret;
  }

  public static string GetLocalAuthInfo() {
    string ret = aidi_visionPINVOKE.Entry_GetLocalAuthInfo();
    return ret;
  }

  public static void InitAlgoPlugin(string algorithm_path) {
    aidi_visionPINVOKE.Entry_InitAlgoPlugin__SWIG_0(algorithm_path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InitAlgoPlugin() {
    aidi_visionPINVOKE.Entry_InitAlgoPlugin__SWIG_1();
  }

  public static void InitLogFile(string file_path) {
    aidi_visionPINVOKE.Entry_InitLogFile(file_path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InitLogDir(string dir_path) {
    aidi_visionPINVOKE.Entry_InitLogDir(dir_path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetLogFilter(string filter) {
    aidi_visionPINVOKE.Entry_SetLogFilter(filter);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int GetDeviceNumber() {
    int ret = aidi_visionPINVOKE.Entry_GetDeviceNumber();
    return ret;
  }

  public static string GetDeviceInfo() {
    string ret = aidi_visionPINVOKE.Entry_GetDeviceInfo();
    return ret;
  }

  public static StringVector ModuleNames() {
    StringVector ret = new StringVector(aidi_visionPINVOKE.Entry_ModuleNames(), true);
    return ret;
  }

  public static void ShutDown() {
    aidi_visionPINVOKE.Entry_ShutDown();
  }

}

}
namespace aqrose.aidi_vision {

public class Templ : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Templ(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Templ obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Templ() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static string GetTrainParamTemplateString(string module_type) {
    string ret = aidi_visionPINVOKE.Templ_GetTrainParamTemplateString(module_type);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ValidateTrainParamString(string param_str, string module_type) {
    bool ret = aidi_visionPINVOKE.Templ_ValidateTrainParamString(param_str, module_type);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GetTrainParamTemplateFile(string path, string module_type) {
    bool ret = aidi_visionPINVOKE.Templ_GetTrainParamTemplateFile(path, module_type);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ValidateTrainParamFile(string path, string module_type) {
    bool ret = aidi_visionPINVOKE.Templ_ValidateTrainParamFile(path, module_type);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetTestParamTemplateString(string module_type) {
    string ret = aidi_visionPINVOKE.Templ_GetTestParamTemplateString(module_type);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ValidateTestParamString(string param_str, string module_type) {
    bool ret = aidi_visionPINVOKE.Templ_ValidateTestParamString(param_str, module_type);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GetTestParamTemplateFile(string path, string module_type) {
    bool ret = aidi_visionPINVOKE.Templ_GetTestParamTemplateFile(path, module_type);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ValidateTestParamFile(string path, string module_type) {
    bool ret = aidi_visionPINVOKE.Templ_ValidateTestParamFile(path, module_type);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetTaskInfoTemplateString() {
    string ret = aidi_visionPINVOKE.Templ_GetTaskInfoTemplateString();
    return ret;
  }

  public static bool ValidateTaskInfoString(string task_str) {
    bool ret = aidi_visionPINVOKE.Templ_ValidateTaskInfoString(task_str);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GetTaskInfoTemplateFile(string path) {
    bool ret = aidi_visionPINVOKE.Templ_GetTaskInfoTemplateFile(path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ValidateTaskInfoFile(string path) {
    bool ret = aidi_visionPINVOKE.Templ_ValidateTaskInfoFile(path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace aqrose.aidi_vision {

public class C_TaskEditor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal C_TaskEditor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(C_TaskEditor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~C_TaskEditor() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_C_TaskEditor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public C_TaskEditor() : this(aidi_visionPINVOKE.new_C_TaskEditor(), true) {
  }

}

}
namespace aqrose.aidi_vision {

public class TaskEditor : C_TaskEditor {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal TaskEditor(global::System.IntPtr cPtr, bool cMemoryOwn) : base(aidi_visionPINVOKE.TaskEditor_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TaskEditor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_TaskEditor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public TaskEditor() : this(aidi_visionPINVOKE.new_TaskEditor(), true) {
  }

  public bool read_from(string path) {
    bool ret = aidi_visionPINVOKE.TaskEditor_read_from(swigCPtr, path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool save_to(string path) {
    bool ret = aidi_visionPINVOKE.TaskEditor_save_to(swigCPtr, path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool from_json(string json) {
    bool ret = aidi_visionPINVOKE.TaskEditor_from_json(swigCPtr, json);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string to_json() {
    string ret = aidi_visionPINVOKE.TaskEditor_to_json(swigCPtr);
    return ret;
  }

  public bool set_root_path(string path) {
    bool ret = aidi_visionPINVOKE.TaskEditor_set_root_path(swigCPtr, path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_image_format(string format) {
    bool ret = aidi_visionPINVOKE.TaskEditor_set_image_format(swigCPtr, format);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_model_version(string ver) {
    bool ret = aidi_visionPINVOKE.TaskEditor_set_model_version(swigCPtr, ver);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_module_name(string module) {
    bool ret = aidi_visionPINVOKE.TaskEditor_set_module_name(swigCPtr, module);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_indexes(IntVector indexes) {
    bool ret = aidi_visionPINVOKE.TaskEditor_set_indexes(swigCPtr, IntVector.getCPtr(indexes));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace aqrose.aidi_vision {

public class FactoryEditor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FactoryEditor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FactoryEditor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FactoryEditor() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_FactoryEditor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public FactoryEditor() : this(aidi_visionPINVOKE.new_FactoryEditor(), true) {
  }

  public bool read_from(string factory_dir) {
    bool ret = aidi_visionPINVOKE.FactoryEditor_read_from(swigCPtr, factory_dir);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool save_to(string factory_dir, bool with_export) {
    bool ret = aidi_visionPINVOKE.FactoryEditor_save_to(swigCPtr, factory_dir, with_export);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void add_module(string module_type, string model_path) {
    aidi_visionPINVOKE.FactoryEditor_add_module(swigCPtr, module_type, model_path);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_modules(StringVector module_types, StringVector model_paths) {
    aidi_visionPINVOKE.FactoryEditor_set_modules(swigCPtr, StringVector.getCPtr(module_types), StringVector.getCPtr(model_paths));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    aidi_visionPINVOKE.FactoryEditor_clear(swigCPtr);
  }

  public uint size() {
    uint ret = aidi_visionPINVOKE.FactoryEditor_size(swigCPtr);
    return ret;
  }

  public string type_at(uint ref_) {
    string ret = aidi_visionPINVOKE.FactoryEditor_type_at(swigCPtr, ref_);
    return ret;
  }

  public string path_at(uint ref_) {
    string ret = aidi_visionPINVOKE.FactoryEditor_path_at(swigCPtr, ref_);
    return ret;
  }

}

}
namespace aqrose.aidi_vision {

public class C_Evaluator : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal C_Evaluator(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(C_Evaluator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~C_Evaluator() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_C_Evaluator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public C_Evaluator() : this(aidi_visionPINVOKE.new_C_Evaluator(), true) {
  }

}

}
namespace aqrose.aidi_vision {

public class Evaluator : C_Evaluator {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Evaluator(global::System.IntPtr cPtr, bool cMemoryOwn) : base(aidi_visionPINVOKE.Evaluator_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Evaluator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_visionPINVOKE.delete_Evaluator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Evaluator() : this(aidi_visionPINVOKE.new_Evaluator(), true) {
  }

  public static void ShowHelp() {
    aidi_visionPINVOKE.Evaluator_ShowHelp__SWIG_0();
  }

  public static void ShowHelp(string eval_name) {
    aidi_visionPINVOKE.Evaluator_ShowHelp__SWIG_1(eval_name);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool load_datas(string task_str) {
    bool ret = aidi_visionPINVOKE.Evaluator_load_datas(swigCPtr, task_str);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_roi(float x, float y, float w, float h) {
    aidi_visionPINVOKE.Evaluator_set_roi(swigCPtr, x, y, w, h);
  }

  public void set_global_mask(Image mask_img) {
    aidi_visionPINVOKE.Evaluator_set_global_mask(swigCPtr, Image.getCPtr(mask_img));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool add_data(LabelIO gt, LabelIO pred) {
    bool ret = aidi_visionPINVOKE.Evaluator_add_data(swigCPtr, LabelIO.getCPtr(gt), LabelIO.getCPtr(pred));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear_data() {
    aidi_visionPINVOKE.Evaluator_clear_data(swigCPtr);
  }

  public void clear() {
    aidi_visionPINVOKE.Evaluator_clear(swigCPtr);
  }

  public SWIGTYPE_p_std__setT_std__string_t label_names() {
    SWIGTYPE_p_std__setT_std__string_t ret = new SWIGTYPE_p_std__setT_std__string_t(aidi_visionPINVOKE.Evaluator_label_names(swigCPtr), false);
    return ret;
  }

  public double eval(string arg_str) {
    double ret = aidi_visionPINVOKE.Evaluator_eval__SWIG_0(swigCPtr, arg_str);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double eval(StringVector arg_str) {
    double ret = aidi_visionPINVOKE.Evaluator_eval__SWIG_1(swigCPtr, StringVector.getCPtr(arg_str));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int eval_and_check(string check_item) {
    int ret = aidi_visionPINVOKE.Evaluator_eval_and_check__SWIG_0(swigCPtr, check_item);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int eval_and_check(StringVector check_list) {
    int ret = aidi_visionPINVOKE.Evaluator_eval_and_check__SWIG_1(swigCPtr, StringVector.getCPtr(check_list));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int eval_and_check() {
    int ret = aidi_visionPINVOKE.Evaluator_eval_and_check__SWIG_2(swigCPtr);
    return ret;
  }

  public string export_report() {
    string ret = aidi_visionPINVOKE.Evaluator_export_report(swigCPtr);
    return ret;
  }

  public bool save_report(string tag) {
    bool ret = aidi_visionPINVOKE.Evaluator_save_report__SWIG_0(swigCPtr, tag);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool save_report() {
    bool ret = aidi_visionPINVOKE.Evaluator_save_report__SWIG_1(swigCPtr);
    return ret;
  }

  public void print_report() {
    aidi_visionPINVOKE.Evaluator_print_report(swigCPtr);
  }

}

}
namespace aqrose.aidi_vision {

class aidi_visionPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="SWIGRegisterExceptionCallbacks_aidi_vision")]
    public static extern void SWIGRegisterExceptionCallbacks_aidi_vision(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_aidi_vision")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_aidi_vision(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_aidi_vision(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_aidi_vision(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="SWIGRegisterStringCallback_aidi_vision")]
    public static extern void SWIGRegisterStringCallback_aidi_vision(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_aidi_vision(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static aidi_visionPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_Clear___")]
  public static extern void IntVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_Add___")]
  public static extern void IntVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_size___")]
  public static extern uint IntVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_capacity___")]
  public static extern uint IntVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_reserve___")]
  public static extern void IntVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_IntVector__SWIG_0___")]
  public static extern global::System.IntPtr new_IntVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_IntVector__SWIG_1___")]
  public static extern global::System.IntPtr new_IntVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_IntVector__SWIG_2___")]
  public static extern global::System.IntPtr new_IntVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_getitemcopy___")]
  public static extern int IntVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_getitem___")]
  public static extern int IntVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_setitem___")]
  public static extern void IntVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_AddRange___")]
  public static extern void IntVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_GetRange___")]
  public static extern global::System.IntPtr IntVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_Insert___")]
  public static extern void IntVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_InsertRange___")]
  public static extern void IntVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_RemoveAt___")]
  public static extern void IntVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_RemoveRange___")]
  public static extern void IntVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_Repeat___")]
  public static extern global::System.IntPtr IntVector_Repeat(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_Reverse__SWIG_0___")]
  public static extern void IntVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_Reverse__SWIG_1___")]
  public static extern void IntVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_SetRange___")]
  public static extern void IntVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_Contains___")]
  public static extern bool IntVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_IndexOf___")]
  public static extern int IntVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_LastIndexOf___")]
  public static extern int IntVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_IntVector_Remove___")]
  public static extern bool IntVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_IntVector___")]
  public static extern void delete_IntVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_Clear___")]
  public static extern void StringVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_Add___")]
  public static extern void StringVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_size___")]
  public static extern uint StringVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_capacity___")]
  public static extern uint StringVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_reserve___")]
  public static extern void StringVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_StringVector__SWIG_0___")]
  public static extern global::System.IntPtr new_StringVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_StringVector__SWIG_1___")]
  public static extern global::System.IntPtr new_StringVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_StringVector__SWIG_2___")]
  public static extern global::System.IntPtr new_StringVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_getitemcopy___")]
  public static extern string StringVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_getitem___")]
  public static extern string StringVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_setitem___")]
  public static extern void StringVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_AddRange___")]
  public static extern void StringVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_GetRange___")]
  public static extern global::System.IntPtr StringVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_Insert___")]
  public static extern void StringVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_InsertRange___")]
  public static extern void StringVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_RemoveAt___")]
  public static extern void StringVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_RemoveRange___")]
  public static extern void StringVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_Repeat___")]
  public static extern global::System.IntPtr StringVector_Repeat(string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_Reverse__SWIG_0___")]
  public static extern void StringVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_Reverse__SWIG_1___")]
  public static extern void StringVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_SetRange___")]
  public static extern void StringVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_Contains___")]
  public static extern bool StringVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_IndexOf___")]
  public static extern int StringVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_LastIndexOf___")]
  public static extern int StringVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringVector_Remove___")]
  public static extern bool StringVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_StringVector___")]
  public static extern void delete_StringVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_StringFloatMap__SWIG_0___")]
  public static extern global::System.IntPtr new_StringFloatMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_StringFloatMap__SWIG_1___")]
  public static extern global::System.IntPtr new_StringFloatMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringFloatMap_size___")]
  public static extern uint StringFloatMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringFloatMap_empty___")]
  public static extern bool StringFloatMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringFloatMap_Clear___")]
  public static extern void StringFloatMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringFloatMap_getitem___")]
  public static extern float StringFloatMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringFloatMap_setitem___")]
  public static extern void StringFloatMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringFloatMap_ContainsKey___")]
  public static extern bool StringFloatMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringFloatMap_Add___")]
  public static extern void StringFloatMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringFloatMap_Remove___")]
  public static extern bool StringFloatMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringFloatMap_create_iterator_begin___")]
  public static extern global::System.IntPtr StringFloatMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringFloatMap_get_next_key___")]
  public static extern string StringFloatMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_StringFloatMap_destroy_iterator___")]
  public static extern void StringFloatMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_StringFloatMap___")]
  public static extern void delete_StringFloatMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_C_LabelIO___")]
  public static extern global::System.IntPtr new_C_LabelIO();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_C_LabelIO___")]
  public static extern void delete_C_LabelIO(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_ReadFrom__SWIG_0___")]
  public static extern global::System.IntPtr LabelIO_ReadFrom__SWIG_0(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_ReadFrom__SWIG_1___")]
  public static extern global::System.IntPtr LabelIO_ReadFrom__SWIG_1(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_LabelIO__SWIG_0___")]
  public static extern global::System.IntPtr new_LabelIO__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_LabelIO__SWIG_1___")]
  public static extern global::System.IntPtr new_LabelIO__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_LabelIO___")]
  public static extern void delete_LabelIO(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_size___")]
  public static extern uint LabelIO_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_alloc_data___")]
  public static extern string LabelIO_alloc_data(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_mutable_data___")]
  public static extern string LabelIO_mutable_data(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_data__SWIG_0___")]
  public static extern string LabelIO_data__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_data__SWIG_1___")]
  public static extern void LabelIO_data__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_data2str___")]
  public static extern string LabelIO_data2str(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_clear___")]
  public static extern void LabelIO_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_empty___")]
  public static extern bool LabelIO_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_set_data__SWIG_0___")]
  public static extern void LabelIO_set_data__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_set_data__SWIG_1___")]
  public static extern void LabelIO_set_data__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_read_from__SWIG_0___")]
  public static extern bool LabelIO_read_from__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_save_to__SWIG_0___")]
  public static extern bool LabelIO_save_to__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_to_string___")]
  public static extern string LabelIO_to_string(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_to_short_string___")]
  public static extern string LabelIO_to_short_string(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_to_json___")]
  public static extern string LabelIO_to_json(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_from_json___")]
  public static extern bool LabelIO_from_json(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_read_33X_segment_label__SWIG_0___")]
  public static extern bool read_33X_segment_label__SWIG_0(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_read_33X_segment_label__SWIG_1___")]
  public static extern bool read_33X_segment_label__SWIG_1(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_read_33X_detection_label___")]
  public static extern bool read_33X_detection_label(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_read_33X_classify_label___")]
  public static extern bool read_33X_classify_label(string jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_Clear___")]
  public static extern void BatchLabelIO_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_Add___")]
  public static extern void BatchLabelIO_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_size___")]
  public static extern uint BatchLabelIO_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_capacity___")]
  public static extern uint BatchLabelIO_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_reserve___")]
  public static extern void BatchLabelIO_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_BatchLabelIO__SWIG_0___")]
  public static extern global::System.IntPtr new_BatchLabelIO__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_BatchLabelIO__SWIG_1___")]
  public static extern global::System.IntPtr new_BatchLabelIO__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_BatchLabelIO__SWIG_2___")]
  public static extern global::System.IntPtr new_BatchLabelIO__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_getitemcopy___")]
  public static extern global::System.IntPtr BatchLabelIO_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_getitem___")]
  public static extern global::System.IntPtr BatchLabelIO_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_setitem___")]
  public static extern void BatchLabelIO_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_AddRange___")]
  public static extern void BatchLabelIO_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_GetRange___")]
  public static extern global::System.IntPtr BatchLabelIO_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_Insert___")]
  public static extern void BatchLabelIO_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_InsertRange___")]
  public static extern void BatchLabelIO_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_RemoveAt___")]
  public static extern void BatchLabelIO_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_RemoveRange___")]
  public static extern void BatchLabelIO_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_Repeat___")]
  public static extern global::System.IntPtr BatchLabelIO_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_Reverse__SWIG_0___")]
  public static extern void BatchLabelIO_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_Reverse__SWIG_1___")]
  public static extern void BatchLabelIO_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchLabelIO_SetRange___")]
  public static extern void BatchLabelIO_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_BatchLabelIO___")]
  public static extern void delete_BatchLabelIO(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_C_Image___")]
  public static extern global::System.IntPtr new_C_Image();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_C_Image___")]
  public static extern void delete_C_Image(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_Image__SWIG_0___")]
  public static extern global::System.IntPtr new_Image__SWIG_0(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_Image__SWIG_1___")]
  public static extern global::System.IntPtr new_Image__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_Image__SWIG_2___")]
  public static extern global::System.IntPtr new_Image__SWIG_2(uint jarg1, int jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_Image__SWIG_3___")]
  public static extern global::System.IntPtr new_Image__SWIG_3(uint jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_Image__SWIG_4___")]
  public static extern global::System.IntPtr new_Image__SWIG_4(uint jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_Image__SWIG_5___")]
  public static extern global::System.IntPtr new_Image__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_Image___")]
  public static extern void delete_Image(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_roi___")]
  public static extern global::System.IntPtr Image_roi(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_resize___")]
  public static extern void Image_resize(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_convert_channel___")]
  public static extern bool Image_convert_channel(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_convert_depth___")]
  public static extern void Image_convert_depth(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_crop__SWIG_0___")]
  public static extern global::System.IntPtr Image_crop__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_crop__SWIG_1___")]
  public static extern global::System.IntPtr Image_crop__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_draw___")]
  public static extern void Image_draw(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_clone__SWIG_0___")]
  public static extern global::System.IntPtr Image_clone__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_clone__SWIG_1___")]
  public static extern global::System.IntPtr Image_clone__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_visual_at___")]
  public static extern global::System.IntPtr Image_visual_at(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_from_file__SWIG_0___")]
  public static extern bool Image_from_file__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_from_file__SWIG_1___")]
  public static extern bool Image_from_file__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_from_files__SWIG_0___")]
  public static extern bool Image_from_files__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_from_files__SWIG_1___")]
  public static extern bool Image_from_files__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_to_file___")]
  public static extern bool Image_to_file(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_from_batch___")]
  public static extern bool Image_from_batch(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_decode__SWIG_0___")]
  public static extern bool Image_decode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_decode__SWIG_1___")]
  public static extern bool Image_decode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_encode__SWIG_0___")]
  public static extern bool Image_encode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_encode__SWIG_1___")]
  public static extern bool Image_encode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_show__SWIG_0___")]
  public static extern void Image_show__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_show__SWIG_1___")]
  public static extern void Image_show__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_show__SWIG_2___")]
  public static extern void Image_show__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_from_chars__SWIG_0___")]
  public static extern void Image_from_chars__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, int jarg3, int jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_from_chars__SWIG_1___")]
  public static extern void Image_from_chars__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_from_chars__SWIG_2___")]
  public static extern void Image_from_chars__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_to_chars___")]
  public static extern void Image_to_chars(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_data__SWIG_0___")]
  public static extern global::System.IntPtr Image_data__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_data__SWIG_1___")]
  public static extern global::System.IntPtr Image_data__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_mutable_data__SWIG_0___")]
  public static extern global::System.IntPtr Image_mutable_data__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_mutable_data__SWIG_1___")]
  public static extern global::System.IntPtr Image_mutable_data__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_data_size__SWIG_0___")]
  public static extern uint Image_data_size__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_data_size__SWIG_1___")]
  public static extern uint Image_data_size__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_data_byte_size__SWIG_0___")]
  public static extern uint Image_data_byte_size__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_data_byte_size__SWIG_1___")]
  public static extern uint Image_data_byte_size__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_height___")]
  public static extern int Image_height(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_width___")]
  public static extern int Image_width(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_total_channels___")]
  public static extern int Image_total_channels(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_channels__SWIG_0___")]
  public static extern int Image_channels__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_channels__SWIG_1___")]
  public static extern int Image_channels__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_depth__SWIG_0___")]
  public static extern int Image_depth__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_depth__SWIG_1___")]
  public static extern int Image_depth__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_empty___")]
  public static extern bool Image_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_visual_size___")]
  public static extern uint Image_visual_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_is_multi_visual___")]
  public static extern bool Image_is_multi_visual(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_release___")]
  public static extern void Image_release(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_Clear___")]
  public static extern void BatchImage_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_Add___")]
  public static extern void BatchImage_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_size___")]
  public static extern uint BatchImage_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_capacity___")]
  public static extern uint BatchImage_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_reserve___")]
  public static extern void BatchImage_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_BatchImage__SWIG_0___")]
  public static extern global::System.IntPtr new_BatchImage__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_BatchImage__SWIG_1___")]
  public static extern global::System.IntPtr new_BatchImage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_BatchImage__SWIG_2___")]
  public static extern global::System.IntPtr new_BatchImage__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_getitemcopy___")]
  public static extern global::System.IntPtr BatchImage_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_getitem___")]
  public static extern global::System.IntPtr BatchImage_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_setitem___")]
  public static extern void BatchImage_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_AddRange___")]
  public static extern void BatchImage_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_GetRange___")]
  public static extern global::System.IntPtr BatchImage_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_Insert___")]
  public static extern void BatchImage_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_InsertRange___")]
  public static extern void BatchImage_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_RemoveAt___")]
  public static extern void BatchImage_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_RemoveRange___")]
  public static extern void BatchImage_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_Repeat___")]
  public static extern global::System.IntPtr BatchImage_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_Reverse__SWIG_0___")]
  public static extern void BatchImage_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_Reverse__SWIG_1___")]
  public static extern void BatchImage_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_BatchImage_SetRange___")]
  public static extern void BatchImage_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_BatchImage___")]
  public static extern void delete_BatchImage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_CustomProcessBase___")]
  public static extern global::System.IntPtr new_CustomProcessBase();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_CustomProcessBase___")]
  public static extern void delete_CustomProcessBase(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_need_pre_process___")]
  public static extern bool CustomProcessBase_need_pre_process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_need_pre_processSwigExplicitCustomProcessBase___")]
  public static extern bool CustomProcessBase_need_pre_processSwigExplicitCustomProcessBase(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_need_post_process___")]
  public static extern bool CustomProcessBase_need_post_process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_need_post_processSwigExplicitCustomProcessBase___")]
  public static extern bool CustomProcessBase_need_post_processSwigExplicitCustomProcessBase(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_need_post_process_only_label___")]
  public static extern bool CustomProcessBase_need_post_process_only_label(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_need_post_process_only_labelSwigExplicitCustomProcessBase___")]
  public static extern bool CustomProcessBase_need_post_process_only_labelSwigExplicitCustomProcessBase(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_pre_process___")]
  public static extern void CustomProcessBase_pre_process(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_pre_processSwigExplicitCustomProcessBase___")]
  public static extern void CustomProcessBase_pre_processSwigExplicitCustomProcessBase(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_post_process___")]
  public static extern void CustomProcessBase_post_process(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_post_processSwigExplicitCustomProcessBase___")]
  public static extern void CustomProcessBase_post_processSwigExplicitCustomProcessBase(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_post_process_only_label___")]
  public static extern void CustomProcessBase_post_process_only_label(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_post_process_only_labelSwigExplicitCustomProcessBase___")]
  public static extern void CustomProcessBase_post_process_only_labelSwigExplicitCustomProcessBase(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_CustomProcessBase_director_connect___")]
  public static extern void CustomProcessBase_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, CustomProcessBase.SwigDelegateCustomProcessBase_0 delegate0, CustomProcessBase.SwigDelegateCustomProcessBase_1 delegate1, CustomProcessBase.SwigDelegateCustomProcessBase_2 delegate2, CustomProcessBase.SwigDelegateCustomProcessBase_3 delegate3, CustomProcessBase.SwigDelegateCustomProcessBase_4 delegate4, CustomProcessBase.SwigDelegateCustomProcessBase_5 delegate5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_C_Client___")]
  public static extern global::System.IntPtr new_C_Client();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_C_Client___")]
  public static extern void delete_C_Client(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_Client__SWIG_0___")]
  public static extern global::System.IntPtr new_Client__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_Client__SWIG_1___")]
  public static extern global::System.IntPtr new_Client__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_Client___")]
  public static extern void delete_Client(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_load_task___")]
  public static extern bool Client_load_task(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_max_iters___")]
  public static extern int Client_max_iters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_start___")]
  public static extern void Client_start(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_stop___")]
  public static extern void Client_stop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_get_avg_time___")]
  public static extern float Client_get_avg_time(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_get_current_index___")]
  public static extern int Client_get_current_index(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_get_used_gpus___")]
  public static extern global::System.IntPtr Client_get_used_gpus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_add_model_engine__SWIG_0___")]
  public static extern int Client_add_model_engine__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_add_model_engine__SWIG_1___")]
  public static extern int Client_add_model_engine__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_set_ctm_proc_on_engine___")]
  public static extern void Client_set_ctm_proc_on_engine(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_add_sort_engine__SWIG_0___")]
  public static extern bool Client_add_sort_engine__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_add_sort_engine__SWIG_1___")]
  public static extern bool Client_add_sort_engine__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_add_route_engine___")]
  public static extern bool Client_add_route_engine(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_add_images__SWIG_0___")]
  public static extern ulong Client_add_images__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_add_images__SWIG_1___")]
  public static extern ulong Client_add_images__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_try_get_result__SWIG_0___")]
  public static extern bool Client_try_get_result__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ref ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_wait_get_result__SWIG_0___")]
  public static extern global::System.IntPtr Client_wait_get_result__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ref ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_try_get_result__SWIG_1___")]
  public static extern bool Client_try_get_result__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_wait_get_result__SWIG_1___")]
  public static extern global::System.IntPtr Client_wait_get_result__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_C_Trainer___")]
  public static extern global::System.IntPtr new_C_Trainer();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_C_Trainer___")]
  public static extern void delete_C_Trainer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_Trainer__SWIG_0___")]
  public static extern global::System.IntPtr new_Trainer__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_Trainer__SWIG_1___")]
  public static extern global::System.IntPtr new_Trainer__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_Trainer___")]
  public static extern void delete_Trainer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_load_task___")]
  public static extern bool Trainer_load_task(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_max_iters___")]
  public static extern int Trainer_max_iters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_start__SWIG_0___")]
  public static extern void Trainer_start__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_start__SWIG_1___")]
  public static extern void Trainer_start__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_step___")]
  public static extern void Trainer_step(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_is_training___")]
  public static extern bool Trainer_is_training(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_is_train_over___")]
  public static extern bool Trainer_is_train_over(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_node_rank___")]
  public static extern int Trainer_node_rank(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_node_size___")]
  public static extern int Trainer_node_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_stop___")]
  public static extern void Trainer_stop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_save_model___")]
  public static extern bool Trainer_save_model(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_get_used_gpus___")]
  public static extern global::System.IntPtr Trainer_get_used_gpus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_get_loss___")]
  public static extern global::System.IntPtr Trainer_get_loss(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_VerifyAuth__SWIG_0___")]
  public static extern bool Entry_VerifyAuth__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_VerifyAuth__SWIG_1___")]
  public static extern bool Entry_VerifyAuth__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_BindRemoteAuth___")]
  public static extern bool Entry_BindRemoteAuth(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_GetRemoteAuthInfo__SWIG_0___")]
  public static extern string Entry_GetRemoteAuthInfo__SWIG_0(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_GetRemoteAuthInfo__SWIG_1___")]
  public static extern string Entry_GetRemoteAuthInfo__SWIG_1(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_GetRemoteAuthInfo__SWIG_2___")]
  public static extern string Entry_GetRemoteAuthInfo__SWIG_2();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_GetLocalAuthInfo___")]
  public static extern string Entry_GetLocalAuthInfo();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_InitAlgoPlugin__SWIG_0___")]
  public static extern void Entry_InitAlgoPlugin__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_InitAlgoPlugin__SWIG_1___")]
  public static extern void Entry_InitAlgoPlugin__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_InitLogFile___")]
  public static extern void Entry_InitLogFile(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_InitLogDir___")]
  public static extern void Entry_InitLogDir(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_SetLogFilter___")]
  public static extern void Entry_SetLogFilter(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_GetDeviceNumber___")]
  public static extern int Entry_GetDeviceNumber();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_GetDeviceInfo___")]
  public static extern string Entry_GetDeviceInfo();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_ModuleNames___")]
  public static extern global::System.IntPtr Entry_ModuleNames();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Entry_ShutDown___")]
  public static extern void Entry_ShutDown();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_GetTrainParamTemplateString___")]
  public static extern string Templ_GetTrainParamTemplateString(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_ValidateTrainParamString___")]
  public static extern bool Templ_ValidateTrainParamString(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_GetTrainParamTemplateFile___")]
  public static extern bool Templ_GetTrainParamTemplateFile(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_ValidateTrainParamFile___")]
  public static extern bool Templ_ValidateTrainParamFile(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_GetTestParamTemplateString___")]
  public static extern string Templ_GetTestParamTemplateString(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_ValidateTestParamString___")]
  public static extern bool Templ_ValidateTestParamString(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_GetTestParamTemplateFile___")]
  public static extern bool Templ_GetTestParamTemplateFile(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_ValidateTestParamFile___")]
  public static extern bool Templ_ValidateTestParamFile(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_GetTaskInfoTemplateString___")]
  public static extern string Templ_GetTaskInfoTemplateString();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_ValidateTaskInfoString___")]
  public static extern bool Templ_ValidateTaskInfoString(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_GetTaskInfoTemplateFile___")]
  public static extern bool Templ_GetTaskInfoTemplateFile(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Templ_ValidateTaskInfoFile___")]
  public static extern bool Templ_ValidateTaskInfoFile(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_C_TaskEditor___")]
  public static extern global::System.IntPtr new_C_TaskEditor();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_C_TaskEditor___")]
  public static extern void delete_C_TaskEditor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_TaskEditor___")]
  public static extern global::System.IntPtr new_TaskEditor();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_TaskEditor_read_from___")]
  public static extern bool TaskEditor_read_from(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_TaskEditor_save_to___")]
  public static extern bool TaskEditor_save_to(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_TaskEditor_from_json___")]
  public static extern bool TaskEditor_from_json(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_TaskEditor_to_json___")]
  public static extern string TaskEditor_to_json(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_TaskEditor_set_root_path___")]
  public static extern bool TaskEditor_set_root_path(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_TaskEditor_set_image_format___")]
  public static extern bool TaskEditor_set_image_format(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_TaskEditor_set_model_version___")]
  public static extern bool TaskEditor_set_model_version(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_TaskEditor_set_module_name___")]
  public static extern bool TaskEditor_set_module_name(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_TaskEditor_set_indexes___")]
  public static extern bool TaskEditor_set_indexes(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_TaskEditor___")]
  public static extern void delete_TaskEditor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_FactoryEditor___")]
  public static extern global::System.IntPtr new_FactoryEditor();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_FactoryEditor_read_from___")]
  public static extern bool FactoryEditor_read_from(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_FactoryEditor_save_to___")]
  public static extern bool FactoryEditor_save_to(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_FactoryEditor_add_module___")]
  public static extern void FactoryEditor_add_module(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_FactoryEditor_set_modules___")]
  public static extern void FactoryEditor_set_modules(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_FactoryEditor_clear___")]
  public static extern void FactoryEditor_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_FactoryEditor_size___")]
  public static extern uint FactoryEditor_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_FactoryEditor_type_at___")]
  public static extern string FactoryEditor_type_at(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_FactoryEditor_path_at___")]
  public static extern string FactoryEditor_path_at(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_FactoryEditor___")]
  public static extern void delete_FactoryEditor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_C_Evaluator___")]
  public static extern global::System.IntPtr new_C_Evaluator();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_C_Evaluator___")]
  public static extern void delete_C_Evaluator(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_new_Evaluator___")]
  public static extern global::System.IntPtr new_Evaluator();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_ShowHelp__SWIG_0___")]
  public static extern void Evaluator_ShowHelp__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_ShowHelp__SWIG_1___")]
  public static extern void Evaluator_ShowHelp__SWIG_1(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_load_datas___")]
  public static extern bool Evaluator_load_datas(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_set_roi___")]
  public static extern void Evaluator_set_roi(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_set_global_mask___")]
  public static extern void Evaluator_set_global_mask(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_add_data___")]
  public static extern bool Evaluator_add_data(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_clear_data___")]
  public static extern void Evaluator_clear_data(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_clear___")]
  public static extern void Evaluator_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_label_names___")]
  public static extern global::System.IntPtr Evaluator_label_names(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_eval__SWIG_0___")]
  public static extern double Evaluator_eval__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_eval__SWIG_1___")]
  public static extern double Evaluator_eval__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_eval_and_check__SWIG_0___")]
  public static extern int Evaluator_eval_and_check__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_eval_and_check__SWIG_1___")]
  public static extern int Evaluator_eval_and_check__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_eval_and_check__SWIG_2___")]
  public static extern int Evaluator_eval_and_check__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_export_report___")]
  public static extern string Evaluator_export_report(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_save_report__SWIG_0___")]
  public static extern bool Evaluator_save_report__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_save_report__SWIG_1___")]
  public static extern bool Evaluator_save_report__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_print_report___")]
  public static extern void Evaluator_print_report(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_delete_Evaluator___")]
  public static extern void delete_Evaluator(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_LabelIO_SWIGUpcast___")]
  public static extern global::System.IntPtr LabelIO_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Image_SWIGUpcast___")]
  public static extern global::System.IntPtr Image_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Client_SWIGUpcast___")]
  public static extern global::System.IntPtr Client_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Trainer_SWIGUpcast___")]
  public static extern global::System.IntPtr Trainer_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_TaskEditor_SWIGUpcast___")]
  public static extern global::System.IntPtr TaskEditor_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision", EntryPoint="CSharp_aqrosefaidi_vision_Evaluator_SWIGUpcast___")]
  public static extern global::System.IntPtr Evaluator_SWIGUpcast(global::System.IntPtr jarg1);
}

}
namespace aqrose.aidi_vision {

public class aidi_vision {
  public static bool read_33X_segment_label(string path, LabelIO label, string default_name) {
    bool ret = aidi_visionPINVOKE.read_33X_segment_label__SWIG_0(path, LabelIO.getCPtr(label), default_name);
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool read_33X_segment_label(string path, LabelIO label) {
    bool ret = aidi_visionPINVOKE.read_33X_segment_label__SWIG_1(path, LabelIO.getCPtr(label));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool read_33X_detection_label(string path, LabelIO label) {
    bool ret = aidi_visionPINVOKE.read_33X_detection_label(path, LabelIO.getCPtr(label));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool read_33X_classify_label(string label_path, string image_path, LabelIO label) {
    bool ret = aidi_visionPINVOKE.read_33X_classify_label(label_path, image_path, LabelIO.getCPtr(label));
    if (aidi_visionPINVOKE.SWIGPendingException.Pending) throw aidi_visionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace aqrose.aidi_vision {

public class SWIGTYPE_p_std__setT_std__string_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__setT_std__string_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__setT_std__string_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__setT_std__string_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision {

public class SWIGTYPE_p_bool {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_bool(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_bool() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_bool obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision {

public class SWIGTYPE_p_std__string {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__string(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__string() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__string obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision {

public class SWIGTYPE_p_int {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_int(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_int() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
